///methods exercises

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace exercises
{
    class Program
    {
        static void Main(string[] args)
        {
            string name = Console.ReadLine();
            PrintName(name);
        }

        private static void PrintName(string name)
        {
            Console.WriteLine($"Hello, {name}!");
        }
    }
}
////////////////////////
get max
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace exercises
{
    class Program
    {
        static void Main(string[] args)
        {
            var first = int.Parse(Console.ReadLine());
            var second = int.Parse(Console.ReadLine());
            var third = int.Parse(Console.ReadLine());
          // var max =  PrintMax(first, second, third);
            Console.WriteLine(PrintMax(first, second, third));
        }

        private static int PrintMax(int first, int second, int third)
        {
            if (first>second&&first>third)
            {
                return first;
            }
            else if (second>first&&second>third)
            {
                return second;
            }
            else
            {
                return third;
            }
        }
    }
}
///////////////name of last digit

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace exercises
{
    class Program
    {
        static void Main(string[] args)
        {
            var num = int.Parse(Console.ReadLine());
            nameDigit(num);
        }

        private static void nameDigit(int num)
        {
            int last = num % 10;
            if (last==1)
            {
                Console.WriteLine("one");
            }
            else if (last==2)
            {
                Console.WriteLine("two");
            }
            else if (last==3)
            {
                Console.WriteLine("three");
            }
            else if (last ==4)
            {
                Console.WriteLine("four");
            }
            else if (last ==5)
            {
                Console.WriteLine("five");
            }
            else if (last ==6)
            {
                Console.WriteLine("six");
            }
            else if (last ==7)
            {
                Console.WriteLine("seven");
            }
            else if (last ==8)
            {
                Console.WriteLine("eight");
            }
            else if (last ==9)
            {
                Console.WriteLine("nine");
            }
            else if (last ==0)
            {
                Console.WriteLine("zero");
            }
        }
    }
}
/////////////
reversed number order
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace just_for_typing
{
    class Program
    {
        static void Main(string[] args)
        {
            var n = decimal.Parse(Console.ReadLine());
            Console.WriteLine($"{numReversed(n)}");
           
        }

        private static decimal numReversed(decimal n)
        {
            var decimalToString = n.ToString();
            string reversed = string.Empty;
            for (int i = decimalToString.Length-1; i >= 0; i--)
            {
                reversed += decimalToString[i];
            }

            return decimal.Parse(reversed);
        }
    }
}


/////////////
fibonacci

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace exercises
{
    class Program
    {
        static void Main(string[] args)
        {// fibonacci number
            var n = int.Parse(Console.ReadLine());

            var fibonacciArr = new int[n+1];
            var ready =  fibonacciToAcc(fibonacciArr) ;
            Console.WriteLine(ready[n]);


        }

        private static int[] fibonacciToAcc(int[] fibonacciArr)
        {
            fibonacciArr[0] = 1;
            fibonacciArr[1] = 1;
            for (int i = 2; i < fibonacciArr.Length; i++)
            {
                fibonacciArr[i] = fibonacciArr[i - 1] + fibonacciArr[i - 2];

            }
            return fibonacciArr;
        }
    }
}
//////////////// prime
prime number
using System;
using System.Globalization;

class arr
{
    static void Main()
    {
        long number = long.Parse(Console.ReadLine());
        if (number<2)
        {
            Console.WriteLine("false");
        }
        else if (number>=2)
        {
            if (IsPrime(number)==true)
            {
                Console.WriteLine("true");
            }
            else
            {
                Console.WriteLine("false");
            }
        }
    }

    static bool IsPrime(long number)
    {
        for (int i = 2; i < number; i++)
        {
            if (number % i == 0 && i != number)
                return false;
        }
        return true;
    }
}
//////////////////////////
area
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace just_for_typing
{
    class Program
    {
        static void Main(string[] args)
        {
            var type = Console.ReadLine().ToLower();
            var area = GetArea(type);
            Console.WriteLine($"{area:f2}");
        }

        private static double GetArea(string type)
        {
            if (type=="triangle")
            {
             var side =  int.Parse(Console.ReadLine());
                var height = int.Parse(Console.ReadLine());
                return (side * height) / 2;
            }
            else if (type == "square" )
            {
                var side = int.Parse(Console.ReadLine());
                return side * side;
            }
            else if (type == "rectangle")
            {
                var side = int.Parse(Console.ReadLine());
                var height = int.Parse(Console.ReadLine());
                return (side * height);
            }
            else if (type== "circle")
            {
                var radius = int.Parse(Console.ReadLine());
                var area = Math.PI * radius * radius;
                return area;
            }
            else
            {
                return 0;
            }
        }

      
    }
}
